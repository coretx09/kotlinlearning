collection
 Une collection peut être définie comme un certain nombre d'objets du même type de données.

Une LISTE est une collection d'articles avec un ordre spécifique. Il existe deux types de listes dans Kotlin :

 ~ Read-only list : List ne peut pas être modifiée après sa création.
 ~ Mutable list : MutableList peut être modifiée après sa création, ce qui signifie que vous pouvez ajouter,
     supprimer ou mettre à jour ses éléments.

Lorsque vous utilisez List ou MutableList, vous devez spécifier le type d'élément qu'il peut contenir.
 Par exemple, List<Int> contient une liste d'entiers et MutableList<String> contient une liste de chaînes.
 Kotlin essaie de déduire le type d'éléments que la liste contient à partir des arguments passés.
 Lorsque vous initialisez une liste vide sans éléments, Kotlin ne peut pas déduire le type des éléments,
 vous devez donc indiquer explicitement le type.

   CREER UNE LIST :
La fonction de bibliothèque standard Kotlin listOf() permet de creer une liste

   CREER UNE LIST MUTABLE :
Vous pouvez ajouter, supprimer ou modifier des éléments. Vous pouvez les créer en appelant mutableListOf().
Vous pouvez également faire tout ce que vous pouvez faire avec les listes en lecture seule

Vous pouvez utiliser val pour une liste modifiable car la variable contient une référence à la liste,
et cette référence ne change pas même si le contenu de la liste change.


   Parcourez une liste :
   while loops :
Il contient un bloc de code (entre accolades) qui est exécuté encore et encore, tant que l'expression
entre parenthèses est vraie.

 while (expression) {
     // While the expression is true, execute this code block
 }

Pour empêcher le code de s'exécuter pour toujours (appelée boucle infinie), le bloc de code doit contenir
une logique qui modifie la valeur de l'expression, de sorte que l'expression soit finalement fausse
et que vous arrêtiez d'exécuter la boucle.

    For loops :
Cela permet de parcourir une liste beaucoup plus facilement.

  for (number in numberList) {
     // For each element in the list, execute this code block
  }

 La variable numbere st définie égale au premier élément de numberListet le bloc de code est exécuté.
 Ensuite, la number variable est automatiquement mise à jour pour être l'élément suivant de numberList,
 et le bloc de code est à nouveau exécuté. Cela se répète pour chaque élément de la liste, jusqu'à ce
 que la fin de numberList soit atteinte.


 C'est très bien comment vous pouvez écrire les instructions pour ce qui doit arriver pour 1 élément de la liste,
  et le code est exécuté pour chaque élément de la liste ! L'utilisation d'une boucle peut vous éviter de taper
  beaucoup de code répétitif.

 Le vararg modificateur vous permet de passer un nombre variable d'arguments à une fonction ou à un constructeur